{{define "ElemTempl"}}{{if eq (.Type) 1 }}{{/*Ptr*/}}{{template "PtrTempl" .Ptr}}{{else if eq (.Type) 2 }}{{/*Slice*/}}{{template "SliceTempl" .Slice}}{{else if eq (.Type) 3 }}{{/*Struct*/}}{{template "StructTempl" .Struct}}{{else if eq (.Type) 4 }}{{/*Base*/}}{{template "BaseTempl" .Base}}{{else if eq (.Type) 5 }}{{/* Map */}}{{template "MapTempl" .Map}}{{else if eq (.Type) 6 }}{{/* Array */}}{{template "ArrayTempl" .Array}}{{end}}{{end}}

{{define "PtrTempl"}}
	if {{.Varname}} == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		{{template "ElemTempl" .Value}}
	}
{{end}}

{{define "BaseTempl"}}
	{{if .Convert}}
	err = en.Write{{.BaseName}}({{.ToBase}}({{.Varname}}))
	{{else if .IsIdent}}
	err = {{.Varname}}.EncodeMsg(en)
	{{else}}
	err = en.Write{{.BaseName}}({{.Varname}})
	{{end}}
	if err != nil {
		return
	}
{{end}}

{{define "MapTempl"}}
	err = en.WriteMapHeader(uint32(len({{.Varname}})))
	if err != nil {
		return
	}
	for {{.Keyidx}}, {{.Validx}} := range {{.Varname}} {
		err = en.WriteString({{.Keyidx}})
		if err != nil {
			return
		}
		{{template "ElemTempl" .Value}}
	}
{{end}}

{{define "SliceTempl"}}
	err = en.WriteArrayHeader(uint32(len({{.Varname}})))
	if err != nil {
		return
	}
	for {{.Index}} := range {{.Varname}} {
		{{template "ElemTempl" .Els}}
	}
{{end}}

{{define "ArrayTempl"}}
	err = en.WriteArrayHeader({{.Size}})
	if err != nil {
		return
	}
	for {{.Index}} := range {{.Varname}} {
		{{template "ElemTempl" .Els}}
	}
{{end}}

{{define "StructTempl"}}
	{{if .AsTuple}}
	err = en.WriteArrayHeader({{len .Fields}})
	if err != nil {
		return
	}
	{{range .Fields}}{{template "ElemTempl" .FieldElem}}{{end}}
	{{else}}
	err = en.WriteMapHeader({{len .Fields}})
	if err != nil {
		return
	}
	{{range .Fields}}
	err = en.WriteString("{{.FieldTag}}")
	if err != nil {
		return
	}
	{{template "ElemTempl" .FieldElem}}{{end}}
	{{end}}
{{end}}